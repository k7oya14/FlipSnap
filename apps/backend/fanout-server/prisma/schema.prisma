generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String    @id @default(uuid())
  authorId  String
  imgFront  String
  imgBack   String
  caption   String
  createdAt DateTime  @default(now())
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([createdAt(sort: Desc)])
}

model User {
  id            String              @id @default(cuid())
  username      String?             @unique
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  name          String?
  bio           String              @default("")
  created_at    DateTime            @default(now())
  accounts      Account[]
  comments      Comment[]
  likes         Like[]
  posts         Post[]
  sessions      Session[]
  followedBy    User_User_Follows[] @relation("FollowedBy")
  following     User_User_Follows[] @relation("Following")
}

model User_User_Follows {
  followerId String
  followeeId String
  createdAt  DateTime @default(now())
  followee   User     @relation("FollowedBy", fields: [followeeId], references: [id], onDelete: Cascade)
  follower   User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followerId, followeeId])
  @@index([followerId, createdAt(sort: Desc)])
  @@index([followeeId, createdAt(sort: Desc)])
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt(sort: Desc)])
}

model Like {
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([postId])
}
