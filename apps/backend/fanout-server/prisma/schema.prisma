generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id        String   @id
  postId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt(sort: Desc)])
}

model Like {
  userId    String
  postId    String
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([postId])
  @@index([userId, createdAt(sort: Desc)])
}

model Post {
  id        String    @id
  authorId  String
  imgFront  String
  imgBack   String
  caption   String
  createdAt DateTime  @default(now())
  Comment   Comment[]
  Like      Like[]
  User      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([createdAt(sort: Desc)])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                                   String              @id
  username                                             String?             @unique
  email                                                String?             @unique
  emailVerified                                        DateTime?
  image                                                String?
  name                                                 String?
  bio                                                  String              @default("")
  created_at                                           DateTime            @default(now())
  Account                                              Account[]
  Comment                                              Comment[]
  Like                                                 Like[]
  Post                                                 Post[]
  Session                                              Session[]
  User_User_Follows_User_User_Follows_followeeIdToUser User_User_Follows[] @relation("User_User_Follows_followeeIdToUser")
  User_User_Follows_User_User_Follows_followerIdToUser User_User_Follows[] @relation("User_User_Follows_followerIdToUser")
}

model User_User_Follows {
  followerId                              String
  followeeId                              String
  createdAt                               DateTime @default(now())
  User_User_User_Follows_followeeIdToUser User     @relation("User_User_Follows_followeeIdToUser", fields: [followeeId], references: [id], onDelete: Cascade)
  User_User_User_Follows_followerIdToUser User     @relation("User_User_Follows_followerIdToUser", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followerId, followeeId])
  @@index([followeeId, createdAt(sort: Desc)])
  @@index([followerId, createdAt(sort: Desc)])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
